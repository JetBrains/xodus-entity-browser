import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer

plugins {
    id "ca.coglinc.javacc" version "2.3.1"
}

apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'

def javaCCFolder = "src/main/generated"

sourceSets {
    main {
        java {
            srcDir file(javaCCFolder)
        }
    }
}

dependencies {
    compile 'org.slf4j:slf4j-simple:1.7.25'
    compile 'io.github.microutils:kotlin-logging:1.7.9'

    compile project(':entity-browser-frontend')

    compile "org.jetbrains.xodus:xodus-environment:$xodusVersion"
    compile "org.jetbrains.xodus:xodus-entity-store:$xodusVersion"
    compile "org.jetbrains.xodus:xodus-openAPI:$xodusVersion"
    compile "org.jetbrains.xodus:xodus-crypto:$xodusVersion"

    compile "io.ktor:ktor-gson:$ktorVersion"
    compile "io.ktor:ktor-utils:$ktorVersion"
    compile "io.ktor:ktor-server-jetty:$ktorVersion"

    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'junit:junit:4.11'
    testCompile 'com.squareup.retrofit2:retrofit:2.3.0'
    testCompile 'com.squareup.retrofit2:converter-jackson:2.3.0'
    testCompile 'com.squareup.okhttp3:okhttp:3.12.1'
    testCompile 'com.squareup.okhttp3:logging-interceptor:3.12.1'

    testCompile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8'
}

shadowJar {
    baseName = "xodus-entity-browser"
    version = null
    destinationDir = globalArtifactsBuildDir
    manifest {
        attributes 'Main-Class': 'jetbrains.xodus.browser.web.MainKt'
    }
    transform(ServiceFileTransformer) {
        path = 'META-INF/services'
        include 'org.eclipse.jetty.http.HttpFieldPreEncoder'
    }
}

task runShadow(type: JavaExec) {
    classpath(shadowJar.archiveFile)
}

artifacts {
    archives shadowJar
}

clean {
    delete javaCCFolder
}

compileJavacc {
    inputDirectory = file('src/main/javacc')
    outputDirectory = file(javaCCFolder + '/jetbrains/xodus/browser/web/search')
    // plugin wont create package for generated classes
}
