import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer

plugins {
    id 'com.intershop.gradle.javacc' version '4.1.3'
}

configurations {
    frontend
    frontend_libs
    hub_libs
}

apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
    implementation 'org.slf4j:slf4j-simple:1.7.25'
    implementation 'io.github.microutils:kotlin-logging:1.7.9'

    frontend project(path: ':entity-browser-frontend', configuration: 'frontend_build')

    implementation "org.jetbrains.xodus:xodus-environment:$xodusVersion"
    implementation "org.jetbrains.xodus:xodus-entity-store:$xodusVersion"
    implementation "org.jetbrains.xodus:xodus-openAPI:$xodusVersion"
    implementation "org.jetbrains.xodus:xodus-crypto:$xodusVersion"

//    implementation "io.ktor:ktor-gson:$ktorVersion"
    //implementation "io.ktor:ktor-server-jetty:$ktorVersion"

    implementation "com.google.code.gson:gson:2.10.1"

    implementation "org.eclipse.jetty:jetty-server:$jettyVersion"
    implementation "org.eclipse.jetty:jetty-servlet:$jettyVersion"
    implementation "org.eclipse.jetty:jetty-webapp:$jettyVersion"


    testImplementation 'org.mockito:mockito-all:1.9.5'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'com.squareup.retrofit2:retrofit:2.5.0'
    testImplementation 'com.squareup.retrofit2:converter-jackson:2.5.0'
    testImplementation 'com.squareup.okhttp3:okhttp:3.12.1'
    testImplementation 'com.squareup.okhttp3:logging-interceptor:3.12.1'

    testImplementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8'
}

shadowJar {
    dependsOn = ['buildFrontend']
    archiveBaseName.set("xodus-entity-browser")
    archiveVersion.set(null)
    getDestinationDirectory().set(globalArtifactsBuildDir)
    manifest {
        attributes 'Main-Class': 'jetbrains.xodus.browser.web.MainKt'
    }
    transform(ServiceFileTransformer) {
        path = 'META-INF/services'
        include 'org.eclipse.jetty.http.HttpFieldPreEncoder'
    }
    from { project.configurations.frontend.collect { zipTree(it) } }
}

tasks.register('buildFrontend'){
    dependsOn(project.configurations.frontend)
}

tasks.register('runShadow', JavaExec) {
    classpath(shadowJar.archiveFile)
}

artifacts {
    archives shadowJar
}

javacc {
    configs {
        template {
            inputFile = file('src/main/javacc/smart-search.jj')
            packageName = 'jetbrains.xodus.browser.web.search'
            lookahead = '2'
        }
    }
}